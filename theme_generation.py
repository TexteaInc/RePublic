# Automatically generated by scripts, components will be used instead in the future.
import yaml
from typing import TypedDict
from pydatafront.decorator import textea_export

class TypesWidget(TypedDict):
    float: str
    str: str
    int: str
    bool: str

class BasicStyle(TypedDict):
    color: str

class ButtonStyle(TypedDict):
    color: str
    disableElevation: bool
    disableFocusRipple: bool
    disableRipple: bool
    fullWidth: bool
    size: str
    fontColor: str

class CheckboxStyle(TypedDict):
    color: str
    size: str
    fontColor: str

class InputStyle(TypedDict):
    color: str
    disableUnderline: bool
    fullWidth: str
    fontColor: str

class RadioStyle(TypedDict):
    color: str
    disableRipple: bool
    size: str
    fontColor: str

class SelectStyle(TypedDict):
    autoWidth: bool
    defaultOpen: bool
    displayEmpty: bool
    fontColor: str
    color: str

class SliderStyle(TypedDict):
    color: str
    disableSwap: bool
    size: str
    track: str

class SwitchStyle(TypedDict):
    color: str
    disableRipple: bool
    size: str
    fontColor: str

class TextFieldStyle(TypedDict):
    color: str
    fullWidth: bool
    size: str
    fontColor: str

class TooltipStyle(TypedDict):
    arrow: bool
    enterDelay: float
    enterNextDelay: float
    enterTouchDelay: float
    followCursor: bool
    leaveDelay: bool
    leaveTouchDelay: bool

@textea_export(
    path="theme_generation",
    description="Funix Theme Generation",
    types_widget={
        "treat_as": "config",
        "widget": ["json"]
    },
    basic_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    button_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    checkbox_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    input_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    radio_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    select_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    slider_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    switch_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    textField_style={
        "treat_as": "config",
        "widget": ["json"]
    },
    tooltip_style={
        "treat_as": "config",
        "widget": ["json"]
    }
)
def theme_generation(
    types_widget: TypesWidget,
    basic_style: BasicStyle,
    button_style: ButtonStyle,
    checkbox_style: CheckboxStyle,
    input_style: InputStyle,
    radio_style: RadioStyle,
    select_style: SelectStyle,
    slider_style: SliderStyle,
    switch_style: SwitchStyle,
    textField_style: TextFieldStyle,
    tooltip_style: TooltipStyle
):
    theme = {
        "types": types_widget,
        "styles": {
            "basic": basic_style,
            "button": button_style,
            "checkbox": checkbox_style,
            "input": input_style,
            "radio": radio_style,
            "select": select_style,
            "slider": slider_style,
            "switch": switch_style,
            "textField": textField_style,
            "tooltip": tooltip_style
        }
    }

    return {
        "theme": yaml.dump(theme, Dumper = yaml.Dumper)
    }
